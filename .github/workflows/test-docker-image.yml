name: Test Docker Image

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Create required directories
        run: |
          mkdir -p certs
          chmod 755 certs

      - name: Copy environment file
        run: |
          if [ -f .env.example ]; then
            cp .env.example .env
          else
            echo "Warning: .env.example not found, using default values"
          fi

      - name: Build Docker image
        run: docker compose -f compose.yaml build

      - name: Start containers
        run: docker compose -f compose.yaml up -d

      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..30}; do
            if docker compose exec postgres pg_isready -U postgres; then
              exit 0
            fi
            sleep 2
          done
          exit 1

      - name: Check PostgreSQL health
        run: docker compose exec postgres pg_isready -U postgres

      - name: Verify multiple databases
        run: |
          docker compose exec postgres psql -U postgres -c "\l" | grep -q "db1"
          docker compose exec postgres psql -U postgres -c "\l" | grep -q "db2"
          docker compose exec postgres psql -U postgres -c "\l" | grep -q "db3"

      - name: Test SSL connection
        run: |
          # Verify certificate exists
          test -f certs/server.crt || (echo "SSL certificate not found" && exit 1)
          
          # Test SSL connection with values from .env.example
          source .env 2>/dev/null || true
          docker compose exec postgres psql \
            "host=localhost \
            port=${POSTGRES_PORT:-5432} \
            dbname=${POSTGRES_MULTIPLE_DATABASES%%,*} \
            user=${POSTGRES_USER:-postgres} \
            sslmode=verify-full \
            sslcert=/var/lib/postgresql/ssl/server.crt \
            sslkey=/var/lib/postgresql/ssl/server.key \
            sslrootcert=/var/lib/postgresql/.postgresql/root.crt" \
            -c "\conninfo" | grep -q "SSL connection"
